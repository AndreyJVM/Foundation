package mx.kenzie.foundation.assembler.code;

interface Codes {

    byte AALOAD = (byte) 0x32, // 50
        AASTORE = (byte) 0x53, // 83
        ACONST_NULL = (byte) 0x1, // 1
        ALOAD = (byte) 0x19, // 25
        ALOAD_0 = (byte) 0x2a, // 42
        ALOAD_1 = (byte) 0x2b, // 43
        ALOAD_2 = (byte) 0x2c, // 44
        ALOAD_3 = (byte) 0x2d, // 45
        ANEWARRAY = (byte) 0xbd, // 189
        ARETURN = (byte) 0xb0, // 176
        ARRAYLENGTH = (byte) 0xbe, // 190
        ASTORE = (byte) 0x3a, // 58
        ASTORE_0 = (byte) 0x4b, // 75
        ASTORE_1 = (byte) 0x4c, // 76
        ASTORE_2 = (byte) 0x4d, // 77
        ASTORE_3 = (byte) 0x4e, // 78
        ATHROW = (byte) 0xbf, // 191
        BALOAD = (byte) 0x33, // 51
        BASTORE = (byte) 0x54, // 84
        BIPUSH = (byte) 0x10, // 16
        CALOAD = (byte) 0x34, // 52
        CASTORE = (byte) 0x55, // 85
        CHECKCAST = (byte) 0xc0, // 192
        D2F = (byte) 0x90, // 144
        D2I = (byte) 0x8e, // 142
        D2L = (byte) 0x8f, // 143
        DADD = (byte) 0x63, // 99
        DALOAD = (byte) 0x31, // 49
        DASTORE = (byte) 0x52, // 82
        DCMPG = (byte) 0x98, // 152
        DCMPL = (byte) 0x97, // 151
        DCONST_0 = (byte) 0xe, // 14
        DCONST_1 = (byte) 0xf, // 15
        DDIV = (byte) 0x6f, // 111
        DLOAD = (byte) 0x18, // 24
        DLOAD_0 = (byte) 0x26, // 38
        DLOAD_1 = (byte) 0x27, // 39
        DLOAD_2 = (byte) 0x28, // 40
        DLOAD_3 = (byte) 0x29, // 41
        DMUL = (byte) 0x6b, // 107
        DNEG = (byte) 0x77, // 119
        DREM = (byte) 0x73, // 115
        DRETURN = (byte) 0xaf, // 175
        DSTORE = (byte) 0x39, // 57
        DSTORE_0 = (byte) 0x47, // 71
        DSTORE_1 = (byte) 0x48, // 72
        DSTORE_2 = (byte) 0x49, // 73
        DSTORE_3 = (byte) 0x4a, // 74
        DSUB = (byte) 0x67, // 103
        DUP = (byte) 0x59, // 89
        DUP_X1 = (byte) 0x5a, // 90
        DUP_X2 = (byte) 0x5b, // 91
        DUP2 = (byte) 0x5c, // 92
        DUP2_X1 = (byte) 0x5d, // 93
        DUP2_X2 = (byte) 0x5e, // 94
        F2D = (byte) 0x8d, // 141
        F2I = (byte) 0x8b, // 139
        F2L = (byte) 0x8c, // 140
        FADD = (byte) 0x62, // 98
        FALOAD = (byte) 0x30, // 48
        FASTORE = (byte) 0x51, // 81
        FCMPG = (byte) 0x96, // 150
        FCMPL = (byte) 0x95, // 149
        FCONST_0 = (byte) 0xb, // 11
        FCONST_1 = (byte) 0xc, // 12
        FCONST_2 = (byte) 0xd, // 13
        FDIV = (byte) 0x6e, // 110
        FLOAD = (byte) 0x17, // 23
        FLOAD_0 = (byte) 0x22, // 34
        FLOAD_1 = (byte) 0x23, // 35
        FLOAD_2 = (byte) 0x24, // 36
        FLOAD_3 = (byte) 0x25, // 37
        FMUL = (byte) 0x6a, // 106
        FNEG = (byte) 0x76, // 118
        FREM = (byte) 0x72, // 114
        FRETURN = (byte) 0xae, // 174
        FSTORE = (byte) 0x38, // 56
        FSTORE_0 = (byte) 0x43, // 67
        FSTORE_1 = (byte) 0x44, // 68
        FSTORE_2 = (byte) 0x45, // 69
        FSTORE_3 = (byte) 0x46, // 70
        FSUB = (byte) 0x66, // 102
        GETFIELD = (byte) 0xb4, // 180
        GETSTATIC = (byte) 0xb2, // 178
        GOTO = (byte) 0xa7, // 167
        GOTO_W = (byte) 0xc8, // 200
        I2B = (byte) 0x91, // 145
        I2C = (byte) 0x92, // 146
        I2D = (byte) 0x87, // 135
        I2F = (byte) 0x86, // 134
        I2L = (byte) 0x85, // 133
        I2S = (byte) 0x93, // 147
        IADD = (byte) 0x60, // 96
        IALOAD = (byte) 0x2e, // 46
        IAND = (byte) 0x7e, // 126
        IASTORE = (byte) 0x4f, // 79
        ICONST_M1 = (byte) 0x2, // 2
        ICONST_0 = (byte) 0x3, // 3
        ICONST_1 = (byte) 0x4, // 4
        ICONST_2 = (byte) 0x5, // 5
        ICONST_3 = (byte) 0x6, // 6
        ICONST_4 = (byte) 0x7, // 7
        ICONST_5 = (byte) 0x8, // 8
        IDIV = (byte) 0x6c, // 108
        IF_ACMPEQ = (byte) 0xa5, // 165
        IF_ACMPNE = (byte) 0xa6, // 166
        IF_ICMPEQ = (byte) 0x9f, // 159
        IF_ICMPNE = (byte) 0xa0, // 160
        IF_ICMPLT = (byte) 0xa1, // 161
        IF_ICMPGE = (byte) 0xa2, // 162
        IF_ICMPGT = (byte) 0xa3, // 163
        IF_ICMPLE = (byte) 0xa4, // 164
        IFEQ = (byte) 0x99, // 153
        IFNE = (byte) 0x9a, // 154
        IFLT = (byte) 0x9b, // 155
        IFGE = (byte) 0x9c, // 156
        IFGT = (byte) 0x9d, // 157
        IFLE = (byte) 0x9e, // 158
        IFNONNULL = (byte) 0xc7, // 199
        IFNULL = (byte) 0xc6, // 198
        IINC = (byte) 0x84, // 132
        ILOAD = (byte) 0x15, // 21
        ILOAD_0 = (byte) 0x1a, // 26
        ILOAD_1 = (byte) 0x1b, // 27
        ILOAD_2 = (byte) 0x1c, // 28
        ILOAD_3 = (byte) 0x1d, // 29
        IMUL = (byte) 0x68, // 104
        INEG = (byte) 0x74, // 116
        INSTANCEOF = (byte) 0xc1, // 193
        INVOKEDYNAMIC = (byte) 0xba, // 186
        INVOKEINTERFACE = (byte) 0xb9, // 185
        INVOKESPECIAL = (byte) 0xb7, // 183
        INVOKESTATIC = (byte) 0xb8, // 184
        INVOKEVIRTUAL = (byte) 0xb6, // 182
        IOR = (byte) 0x80, // 128
        IREM = (byte) 0x70, // 112
        IRETURN = (byte) 0xac, // 172
        ISHL = (byte) 0x78, // 120
        ISHR = (byte) 0x7a, // 122
        ISTORE = (byte) 0x36, // 54
        ISTORE_0 = (byte) 0x3b, // 59
        ISTORE_1 = (byte) 0x3c, // 60
        ISTORE_2 = (byte) 0x3d, // 61
        ISTORE_3 = (byte) 0x3e, // 62
        ISUB = (byte) 0x64, // 100
        IUSHR = (byte) 0x7c, // 124
        IXOR = (byte) 0x82, // 130
        JSR = (byte) 0xa8, // 168
        JSR_W = (byte) 0xc9, // 201
        L2D = (byte) 0x8a, // 138
        L2F = (byte) 0x89, // 137
        L2I = (byte) 0x88, // 136
        LADD = (byte) 0x61, // 97
        LALOAD = (byte) 0x2f, // 47
        LAND = (byte) 0x7f, // 127
        LASTORE = (byte) 0x50, // 80
        LCMP = (byte) 0x94, // 148
        LCONST_0 = (byte) 0x9, // 9
        LCONST_1 = (byte) 0xa, // 10
        LDC = (byte) 0x12, // 18
        LDC_W = (byte) 0x13, // 19
        LDC2_W = (byte) 0x14, // 20
        LDIV = (byte) 0x6d, // 109
        LLOAD = (byte) 0x16, // 22
        LLOAD_0 = (byte) 0x1e, // 30
        LLOAD_1 = (byte) 0x1f, // 31
        LLOAD_2 = (byte) 0x20, // 32
        LLOAD_3 = (byte) 0x21, // 33
        LMUL = (byte) 0x69, // 105
        LNEG = (byte) 0x75, // 117
        LOOKUPSWITCH = (byte) 0xab, // 171
        LOR = (byte) 0x81, // 129
        LREM = (byte) 0x71, // 113
        LRETURN = (byte) 0xad, // 173
        LSHL = (byte) 0x79, // 121
        LSHR = (byte) 0x7b, // 123
        LSTORE = (byte) 0x37, // 55
        LSTORE_0 = (byte) 0x3f, // 63
        LSTORE_1 = (byte) 0x40, // 64
        LSTORE_2 = (byte) 0x41, // 65
        LSTORE_3 = (byte) 0x42, // 66
        LSUB = (byte) 0x65, // 101
        LUSHR = (byte) 0x7d, // 125
        LXOR = (byte) 0x83, // 131
        MONITORENTER = (byte) 0xc2, // 194
        MONITOREXIT = (byte) 0xc3, // 195
        MULTIANEWARRAY = (byte) 0xc5, // 197
        NEW = (byte) 0xbb, // 187
        NEWARRAY = (byte) 0xbc, // 188
        NOP = (byte) 0x0, // 0
        POP = (byte) 0x57, // 87
        POP2 = (byte) 0x58, // 88
        PUTFIELD = (byte) 0xb5, // 181
        PUTSTATIC = (byte) 0xb3, // 179
        RET = (byte) 0xa9, // 169
        RETURN = (byte) 0xb1, // 177
        SALOAD = (byte) 0x35, // 53
        SASTORE = (byte) 0x56, // 86
        SIPUSH = (byte) 0x11, // 17
        SWAP = (byte) 0x5f, // 95
        TABLESWITCH = (byte) 0xaa, // 170
        WIDE = (byte) 0xc4; // 196

}
